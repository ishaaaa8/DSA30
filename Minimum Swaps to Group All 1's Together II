class Solution {
public:
    int minSwaps(vector<int>& nums) {
        //basically naive is to try out each window of size t but that would give tle so ,
        //instead of nested loop ... do computation by subtracting first and considering last elemet in window 
        // this would work in O(n)
        int n=nums.size();
        vector<int>v=nums;
        int t=0;
        for(int i=0;i<n;i++){
            v.push_back(nums[i]);
            if(nums[i] == 1) t++;
        }
        n=v.size();
        cout<<n;
        int mini=INT_MAX;
        int c=0;
        for(int i=0;i<n-t+1;i++){
            // c=0;
            //this below commented cod ewill giev tle
            // for(int j=i;j<i+t;j++){
            //     if(v[j] == 0) c++;
            // }
            // mini = min(c,mini);
            if(i == 0){
                for(int j=i;j<i+t;j++){
                    if(v[j] == 0) c++;
                }
                mini = min(mini,c);
            }
            else{
                if(v[i-1] == 0) c--;
                if(v[i+t-1] == 0) c++;
                mini = min(mini,c);
            }
        }
        return mini;
    }
    
};
